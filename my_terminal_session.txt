commit 8b3d91e5401ffbf3683efdf9e746aa63b4cc616a
Author: gianni-jin <giannijin123@gmail.com>
Date:   Wed Feb 28 17:39:50 2024 +0100

    Initial commit. As for now, most features planned for now have been added
commit 8b3d91e5401ffbf3683efdf9e746aa63b4cc616a
Author: gianni-jin <giannijin123@gmail.com>
Date:   Wed Feb 28 17:39:50 2024 +0100

    Initial commit. As for now, most features planned for now have been added
commit 8b3d91e5401ffbf3683efdf9e746aa63b4cc616a
Author: gianni-jin <giannijin123@gmail.com>
Date:   Wed Feb 28 17:39:50 2024 +0100

    Initial commit. As for now, most features planned for now have been added

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..549e00a
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
diff --git a/.mvn/wrapper/maven-wrapper.jar b/.mvn/wrapper/maven-wrapper.jar
new file mode 100644
index 0000000..cb28b0e
Binary files /dev/null and b/.mvn/wrapper/maven-wrapper.jar differ
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
index 0000000..5f0536e
--- /dev/null
+++ b/.mvn/wrapper/maven-wrapper.properties
@@ -0,0 +1,2 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.5/apache-maven-3.9.5-bin.zip
+wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar
diff --git a/mvnw b/mvnw
new file mode 100644
index 0000000..66df285
--- /dev/null
+++ b/mvnw
@@ -0,0 +1,308 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.2.0
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "$(uname)" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        JAVA_HOME="$(/usr/libexec/java_home)"; export JAVA_HOME
+      else
+        JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=$(java-config --jre-home)
+  fi
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --unix "$CLASSPATH")
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ] &&
+    JAVA_HOME="$(cd "$JAVA_HOME" || (echo "cannot cd into $JAVA_HOME."; exit 1); pwd)"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="$(which javac)"
+  if [ -n "$javaExecutable" ] && ! [ "$(expr "\"$javaExecutable\"" : '\([^ ]*\)')" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=$(which readlink)
+    if [ ! "$(expr "$readLink" : '\([^ ]*\)')" = "no" ]; then
+      if $darwin ; then
+        javaHome="$(dirname "\"$javaExecutable\"")"
+        javaExecutable="$(cd "\"$javaHome\"" && pwd -P)/javac"
+      else
+        javaExecutable="$(readlink -f "\"$javaExecutable\"")"
+      fi
+      javaHome="$(dirname "\"$javaExecutable\"")"
+      javaHome=$(expr "$javaHome" : '\(.*\)/bin')
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="$(\unset -f command 2>/dev/null; \command -v java)"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=$(cd "$wdir/.." || exit 1; pwd)
+    fi
+    # end of workaround
+  done
+  printf '%s' "$(cd "$basedir" || exit 1; pwd)"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    # Remove \r in case we run on Windows within Git Bash
+    # and check out the repository with auto CRLF management
+    # enabled. Otherwise, we may read lines that are delimited with
+    # \r\n and produce $'-Xarg\r' rather than -Xarg due to word
+    # splitting rules.
+    tr -s '\r\n' ' ' < "$1"
+  fi
+}
+
+log() {
+  if [ "$MVNW_VERBOSE" = true ]; then
+    printf '%s\n' "$1"
+  fi
+}
+
+BASE_DIR=$(find_maven_basedir "$(dirname "$0")")
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}; export MAVEN_PROJECTBASEDIR
+log "$MAVEN_PROJECTBASEDIR"
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+wrapperJarPath="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
+if [ -r "$wrapperJarPath" ]; then
+    log "Found $wrapperJarPath"
+else
+    log "Couldn't find $wrapperJarPath, downloading it ..."
+
+    if [ -n "$MVNW_REPOURL" ]; then
+      wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    else
+      wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    fi
+    while IFS="=" read -r key value; do
+      # Remove '\r' from value to allow usage on windows as IFS does not consider '\r' as a separator ( considers space, tab, new line ('\n'), and custom '=' )
+      safeValue=$(echo "$value" | tr -d '\r')
+      case "$key" in (wrapperUrl) wrapperUrl="$safeValue"; break ;;
+      esac
+    done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+    log "Downloading from: $wrapperUrl"
+
+    if $cygwin; then
+      wrapperJarPath=$(cygpath --path --windows "$wrapperJarPath")
+    fi
+
+    if command -v wget > /dev/null; then
+        log "Found wget ... using wget"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--quiet"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget $QUIET "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        log "Found curl ... using curl"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--silent"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        else
+            curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        fi
+    else
+        log "Falling back to using Java to download"
+        javaSource="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        javaClass="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaSource=$(cygpath --path --windows "$javaSource")
+          javaClass=$(cygpath --path --windows "$javaClass")
+        fi
+        if [ -e "$javaSource" ]; then
+            if [ ! -e "$javaClass" ]; then
+                log " - Compiling MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/javac" "$javaSource")
+            fi
+            if [ -e "$javaClass" ]; then
+                log " - Running MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$wrapperUrl" "$wrapperJarPath") || rm -f "$wrapperJarPath"
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+# If specified, validate the SHA-256 sum of the Maven wrapper jar file
+wrapperSha256Sum=""
+while IFS="=" read -r key value; do
+  case "$key" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;
+  esac
+done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+if [ -n "$wrapperSha256Sum" ]; then
+  wrapperSha256Result=false
+  if command -v sha256sum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | sha256sum -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  elif command -v shasum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | shasum -a 256 -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available."
+    echo "Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties."
+    exit 1
+  fi
+  if [ $wrapperSha256Result = false ]; then
+    echo "Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised." >&2
+    echo "Investigate or delete $wrapperJarPath to attempt a clean download." >&2
+    echo "If you updated your Maven version, you need to update the specified wrapperSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --path --windows "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --windows "$CLASSPATH")
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $*"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+# shellcheck disable=SC2086 # safe args
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
index 0000000..95ba6f5
--- /dev/null
+++ b/mvnw.cmd
@@ -0,0 +1,205 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.2.0
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %WRAPPER_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
+SET WRAPPER_SHA_256_SUM=""
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperSha256Sum" SET WRAPPER_SHA_256_SUM=%%B
+)
+IF NOT %WRAPPER_SHA_256_SUM%=="" (
+    powershell -Command "&{"^
+       "$hash = (Get-FileHash \"%WRAPPER_JAR%\" -Algorithm SHA256).Hash.ToLower();"^
+       "If('%WRAPPER_SHA_256_SUM%' -ne $hash){"^
+       "  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';"^
+       "  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';"^
+       "  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';"^
+       "  exit 1;"^
+       "}"^
+       "}"
+    if ERRORLEVEL 1 goto error
+)
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..b70ebaf
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.2.1</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>com.giannijin</groupId>
+	<artifactId>PeopleFlow</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>PeopleFlow</name>
+	<description>A Simple REST API Employee management application built with Spring boot and Hibernate/JPA. The database used is MySQL. Version 1.0.</description>
+	<properties>
+		<java.version>17</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>io.springfox</groupId>
+			<artifactId>springfox-swagger-ui</artifactId>
+			<version>3.0.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+
+			<groupId>com.mysql</groupId>
+
+			<artifactId>mysql-connector-j</artifactId>
+
+			<scope>runtime</scope>
+
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+
+			<artifactId>spring-boot-starter-test</artifactId>
+
+			<scope>test</scope>
+
+		</dependency>
+		<dependency>
+			<groupId>org.springdoc</groupId>
+			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+			<version>2.0.2</version>
+		</dependency>
+
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+</project>
diff --git a/src/main/java/com/giannijin/PeopleFlow/PeopleFlow.java b/src/main/java/com/giannijin/PeopleFlow/PeopleFlow.java
new file mode 100644
index 0000000..614f299
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/PeopleFlow.java
@@ -0,0 +1,15 @@
+package com.giannijin.PeopleFlow;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Configuration;
+
+@SpringBootApplication
+@Configuration
+public class PeopleFlow {
+
+	public static void main(String[] args) {
+		SpringApplication.run(PeopleFlow.class, args);
+	}
+
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/controller/DepartmentController.java b/src/main/java/com/giannijin/PeopleFlow/controller/DepartmentController.java
new file mode 100644
index 0000000..21585d6
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/controller/DepartmentController.java
@@ -0,0 +1,110 @@
+package com.giannijin.PeopleFlow.controller;
+import com.giannijin.PeopleFlow.model.Employee;
+import com.giannijin.PeopleFlow.dto.DepartmentDTO;
+import com.giannijin.PeopleFlow.model.Department;
+import com.giannijin.PeopleFlow.service.DepartmentService;
+import com.giannijin.PeopleFlow.service.EmployeeService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@RestController
+public class DepartmentController {
+
+    @Autowired
+    private DepartmentService departmentService;
+
+    @Autowired
+    private EmployeeService employeeService;
+
+
+    private DepartmentDTO mapToDTO(Department department) {
+        DepartmentDTO dto = new DepartmentDTO();
+        dto.setId(department.getId());
+        dto.setName(department.getName());
+        dto.setEmployeeIds(department.getEmployees().stream().map(Employee::getId).collect(Collectors.toList()));
+        return dto;
+    }
+
+    @GetMapping("/departments")
+    public List<DepartmentDTO> getDepartments(){
+        List<Department> departments = departmentService.getDepartments();
+        return departments.stream()
+                .map(this::mapToDTO)
+                .collect(Collectors.toList());
+    }
+
+    @GetMapping("/departments/{id}")
+    public DepartmentDTO getDepartment (@PathVariable Long id) {
+        Department department = departmentService.getSingleDepartment(id);
+        return mapToDTO(department);
+    }
+
+    /*
+    @GetMapping("/departments")
+    public List<Department> getDepartments(){
+    return departmentService.getDepartments();
+    }
+
+    @GetMapping("/departments/{id}")
+    public Department getDepartment (@PathVariable Long id) {
+    return departmentService.getSingleDepartment(id);
+    }
+    */
+
+    @DeleteMapping("/departments")
+    public void deleteDepartment (@RequestParam Long id){
+        departmentService.deleteDepartment(id);
+    }
+    @PostMapping("/departments")
+    public ResponseEntity<Department> saveDepartment (@RequestBody DepartmentDTO departmentDTO){
+        Department department = new Department();
+        department.setName(departmentDTO.getName());
+
+        List<Employee> employees = departmentDTO.getEmployeeIds().stream()
+                .map(employeeService::getSingleEmployee)
+                .collect(Collectors.toList());
+
+        employees.forEach(department::addEmployee);
+
+        department = departmentService.saveDepartment(department);
+
+        return new ResponseEntity<Department>(department, HttpStatus.CREATED);
+    }
+
+        /*
+    @PostMapping("/departments")
+    public ResponseEntity<Department> saveDepartment (@RequestBody Department department){
+        department = departmentService.saveDepartment(department);
+        return new ResponseEntity<Department>(department, HttpStatus.CREATED);
+    }
+     */
+
+    @PutMapping("/departments/{id}")
+    public DepartmentDTO updateDepartment (@PathVariable Long id, @RequestBody DepartmentDTO departmentDTO){
+        Department existingDepartment = departmentService.getSingleDepartment(id);
+
+        existingDepartment.setName(departmentDTO.getName());
+
+        List<Employee> employees = departmentDTO.getEmployeeIds().stream()
+                .map(employeeService::getSingleEmployee)
+                .collect(Collectors.toList());
+
+        employees.forEach(existingDepartment::addEmployee);
+
+        Department updatedDepartment = departmentService.updateDepartment(existingDepartment);
+
+        return mapToDTO(updatedDepartment);
+    }
+    /*
+    @PutMapping("/departments/{id}")
+    public Department updateDepartment (@PathVariable Long id, @RequestBody Department department){
+        department.setId(id);
+        return departmentService.updateDepartment(department);
+    }
+     */
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/controller/EmployeeController.java b/src/main/java/com/giannijin/PeopleFlow/controller/EmployeeController.java
new file mode 100644
index 0000000..9da7b58
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/controller/EmployeeController.java
@@ -0,0 +1,132 @@
+package com.giannijin.PeopleFlow.controller;
+
+import com.giannijin.PeopleFlow.dto.DepartmentDTO;
+import com.giannijin.PeopleFlow.dto.EmployeeDTO;
+import com.giannijin.PeopleFlow.exception.ResourceNotFoundException;
+import com.giannijin.PeopleFlow.model.Department;
+import com.giannijin.PeopleFlow.model.Employee;
+import com.giannijin.PeopleFlow.repository.DepartmentRepository;
+import com.giannijin.PeopleFlow.repository.EmployeeRepository;
+import com.giannijin.PeopleFlow.service.EmployeeService;
+import jakarta.validation.Valid;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@RestController
+
+
+
+public class EmployeeController {
+
+
+    @Autowired
+    private EmployeeService EmpService;
+    @Autowired
+    private DepartmentRepository departmentRepository;
+    @Autowired
+    private EmployeeRepository employeeRepository;
+
+
+
+
+    private DepartmentDTO mapToDTO(Department department) {
+        DepartmentDTO dto = new DepartmentDTO();
+        dto.setId(department.getId());
+        dto.setName(department.getName());
+        dto.setEmployeeIds(department.getEmployees().stream().map(Employee::getId).collect(Collectors.toList()));
+        return dto;
+    }
+    private EmployeeDTO mapEmployeeToDTO(Employee employee) {
+        EmployeeDTO dto = new EmployeeDTO();
+        dto.setId(employee.getId());
+        dto.setFirstName(employee.getFirstName());
+        dto.setLastName(employee.getLastName());
+        dto.setAge(employee.getAge());
+        dto.setSex(employee.getSex());
+        dto.setLocation(employee.getLocation());
+        dto.setEmail(employee.getEmail());
+        dto.setDepartment(mapToDTO(employee.getDepartment()));
+        return dto;
+    }
+
+
+@GetMapping("/employees")
+public List<EmployeeDTO> getEmployees(){
+    List<Employee> employees = EmpService.getEmployees();
+    return employees.stream()
+            .map(this::mapEmployeeToDTO)
+            .collect(Collectors.toList());
+}
+    @GetMapping("/employees/{id}") //from path variable section
+    public EmployeeDTO getEmployee (@PathVariable Long id) {
+        Employee employee = EmpService.getSingleEmployee(id);
+        return mapEmployeeToDTO(employee);
+    }
+    @DeleteMapping("/employees")
+    public void deleteEmployee (@RequestParam Long id){
+        EmpService.deleteEmployee(id);
+    }
+
+    @PostMapping("/employees")
+    public ResponseEntity<Employee> saveEmployee (@Valid @RequestBody Employee employee){
+        Long departmentId = employee.getDepartment().getId();
+        String departmentName = employee.getDepartment().getName();  // Assign department name to a variable here
+
+        Department department = departmentRepository.findById(departmentId)
+                .orElseGet(() -> {
+                    Department newDepartment = new Department();
+                    newDepartment.setName(departmentName);  // Use the variable here
+                    return departmentRepository.save(newDepartment);
+                });
+
+        employee.setDepartment(department);
+        employee = employeeRepository.save(employee);
+
+        return new ResponseEntity<Employee>(employee, HttpStatus.CREATED);
+    }
+
+
+
+
+    @PutMapping("/employees/{id}")
+    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
+        Employee employee = employeeRepository.findById(id)
+                .orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
+
+        Department department = departmentRepository.findById(employeeDetails.getDepartment().getId())
+                .orElseThrow(() -> new ResourceNotFoundException("Department not exist with id :" + employeeDetails.getDepartment().getId()));
+
+        employee.setFirstName(employeeDetails.getFirstName());
+        employee.setLastName(employeeDetails.getLastName());
+        // set other fields
+        employee.setDepartment(department);
+
+        Employee updatedEmployee = employeeRepository.save(employee);
+        return ResponseEntity.ok(updatedEmployee);
+    }
+
+
+    @GetMapping("/employees/filterbyLastNameAndLocation")
+    public ResponseEntity<List<EmployeeDTO>> getEmployeesByLastNameAndLocation (@RequestParam String lastName, @RequestParam String location) {
+        List<Employee> employees = EmpService.getEmployeeByLastNameAndLocation(lastName, location);
+        List<EmployeeDTO> employeeDTOs = employees.stream()
+                .map(this::mapEmployeeToDTO)
+                .collect(Collectors.toList());
+        return new ResponseEntity<>(employeeDTOs, HttpStatus.OK);
+    }
+
+
+    @GetMapping("/employees/filterByFirstNameAndLastName")
+    public ResponseEntity<List<EmployeeDTO>> getEmployeeByLastNameAndFirstName (@RequestParam String firstName, @RequestParam String lastName) {
+        List<Employee> employees = EmpService.getEmployeeByFirstNameAndLastName(firstName, lastName);
+        List<EmployeeDTO> employeeDTOs = employees.stream()
+                .map(this::mapEmployeeToDTO)
+                .collect(Collectors.toList());
+        return new ResponseEntity<>(employeeDTOs, HttpStatus.OK);
+    }
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/dto/DepartmentDTO.java b/src/main/java/com/giannijin/PeopleFlow/dto/DepartmentDTO.java
new file mode 100644
index 0000000..73efebf
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/dto/DepartmentDTO.java
@@ -0,0 +1,18 @@
+package com.giannijin.PeopleFlow.dto;
+
+import lombok.*;
+
+import java.util.List;
+
+
+@Getter
+@Setter
+@ToString
+@NoArgsConstructor
+@AllArgsConstructor
+public class DepartmentDTO {
+    private Long id;
+    private String name;
+    private List<Long> employeeIds;
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/dto/EmployeeDTO.java b/src/main/java/com/giannijin/PeopleFlow/dto/EmployeeDTO.java
new file mode 100644
index 0000000..4040e42
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/dto/EmployeeDTO.java
@@ -0,0 +1,20 @@
+package com.giannijin.PeopleFlow.dto;
+
+import lombok.*;
+
+@Getter
+@Setter
+@ToString
+@NoArgsConstructor
+@AllArgsConstructor
+public class EmployeeDTO {
+    private Long id;
+    private String firstName;
+    private String lastName;
+    private Long age;
+    private String sex;
+    private String location;
+    private String email;
+    private DepartmentDTO department;
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/exception/GlobalExceptionHandler.java b/src/main/java/com/giannijin/PeopleFlow/exception/GlobalExceptionHandler.java
new file mode 100644
index 0000000..abacbbb
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/exception/GlobalExceptionHandler.java
@@ -0,0 +1,35 @@
+package com.giannijin.PeopleFlow.exception;
+
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatusCode;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.context.request.WebRequest;
+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
+
+import java.util.List;
+import java.util.Map;
+
+import java.util.LinkedHashMap;
+import java.util.stream.Collectors;
+
+
+@ControllerAdvice
+public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
+    @Override
+    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
+        Map<String, Object> body = new LinkedHashMap<>();
+        body.put("timestamp", System.currentTimeMillis());
+        body.put("status", status.value());
+        List<String> errors = ex.getBindingResult()
+                .getFieldErrors()
+                .stream()
+                .map(x -> x.getDefaultMessage())
+                .collect(Collectors.toList());
+
+        body.put("errors", errors);
+
+        return new ResponseEntity<Object>(body, status);
+    }
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/exception/ResourceNotFoundException.java b/src/main/java/com/giannijin/PeopleFlow/exception/ResourceNotFoundException.java
new file mode 100644
index 0000000..496bcb6
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/exception/ResourceNotFoundException.java
@@ -0,0 +1,7 @@
+package com.giannijin.PeopleFlow.exception;
+
+public class ResourceNotFoundException extends RuntimeException {
+    public ResourceNotFoundException(String message) {
+        super(message);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/model/Department.java b/src/main/java/com/giannijin/PeopleFlow/model/Department.java
new file mode 100644
index 0000000..027a9e4
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/model/Department.java
@@ -0,0 +1,44 @@
+package com.giannijin.PeopleFlow.model;
+
+import com.fasterxml.jackson.annotation.JsonIdentityInfo;
+import com.fasterxml.jackson.annotation.ObjectIdGenerators;
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter
+@Setter
+@ToString
+@Entity
+@NoArgsConstructor
+@AllArgsConstructor
+@JsonIdentityInfo(
+        generator = ObjectIdGenerators.PropertyGenerator.class,
+        property = "id")
+@Table(name = "tbl_departments")
+public class Department {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column (name = "id")
+    private Long id;
+
+
+    @Column (name = "name")
+    private String name;
+    @OneToMany(mappedBy = "department", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, fetch = FetchType.LAZY, orphanRemoval = true)
+    private List<Employee> employees = new ArrayList<>();
+
+    public void addEmployee(Employee employee) {
+        employees.add(employee);
+        employee.setDepartment(this);
+    }
+
+    public void removeEmployee(Employee employee) {
+        employees.remove(employee);
+        employee.setDepartment(null);
+    }
+
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/model/Employee.java b/src/main/java/com/giannijin/PeopleFlow/model/Employee.java
new file mode 100644
index 0000000..448932c
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/model/Employee.java
@@ -0,0 +1,68 @@
+package com.giannijin.PeopleFlow.model;
+
+
+import com.fasterxml.jackson.annotation.JsonIdentityInfo;
+import com.fasterxml.jackson.annotation.ObjectIdGenerators;
+import jakarta.persistence.*;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Pattern;
+import lombok.*;
+
+@JsonIdentityInfo(
+        generator = ObjectIdGenerators.PropertyGenerator.class,
+        property = "id")
+@Entity
+@Table(name = "tbl_employee")
+@Getter
+@Setter
+@ToString
+@NoArgsConstructor
+@AllArgsConstructor
+public class Employee {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column (name = "id")
+    private Long id;
+
+
+    @NotBlank(message = "first name should not be null")
+    @Column (name = "first_name")
+    private String firstName;
+
+
+    @NotBlank(message = "last name should not be null")
+    @Column (name = "last_name")
+    private String lastName;
+
+    @Column (name = "age")
+    private Long age = 0L;
+
+    @Column (name = "sex")
+    @Pattern(regexp="^(M|F)$",message="invalid sex, insert 'M' for male, and 'F' for female")
+    private String sex;
+
+    @Column (name = "location")
+    private String location;
+
+
+    @Column (name = "email")
+    private String email;
+
+
+    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
+    @JoinColumn(name = "department_id")
+    private Department department;
+
+    public void setDepartment(Department department) {
+        if (department == null) {
+            if (this.department != null) {
+                this.department.getEmployees().remove(this);
+            }
+        } else {
+            department.getEmployees().add(this);
+        }
+        this.department = department;
+    }
+
+}
+
diff --git a/src/main/java/com/giannijin/PeopleFlow/repository/DepartmentRepository.java b/src/main/java/com/giannijin/PeopleFlow/repository/DepartmentRepository.java
new file mode 100644
index 0000000..846fb34
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/repository/DepartmentRepository.java
@@ -0,0 +1,6 @@
+package com.giannijin.PeopleFlow.repository;
+
+import com.giannijin.PeopleFlow.model.Department;
+import org.springframework.data.jpa.repository.JpaRepository;
+public interface DepartmentRepository extends JpaRepository <Department, Long> {
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/repository/EmployeeRepository.java b/src/main/java/com/giannijin/PeopleFlow/repository/EmployeeRepository.java
new file mode 100644
index 0000000..be078dd
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/repository/EmployeeRepository.java
@@ -0,0 +1,28 @@
+package com.giannijin.PeopleFlow.repository;
+
+import com.giannijin.PeopleFlow.model.Employee;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+
+@Repository
+public interface EmployeeRepository extends JpaRepository <Employee, Long> {
+
+
+    @Query("SELECT e FROM Employee e WHERE LOWER(e.firstName) LIKE LOWER(CONCAT('%', :firstName, '%')) AND LOWER(e.lastName) LIKE LOWER(CONCAT('%', :lastName, '%'))")
+    List<Employee> findByFirstNameAndLastName(String firstName, String lastName);
+
+    // List<Employee> findByFirstNameContainingIgnoreCaseAndLastNameContainingIgnoreCase (String firstName, String lastName);
+
+
+    @Query("SELECT e FROM Employee e WHERE e.lastName LIKE %:name% AND e.location LIKE %:location%")
+    List<Employee> findByLastNameAndLocation(@Param("name") String name, @Param("location") String location);
+
+    // List<Employee> findByLastNameContainingAndLocationContaining (String name, String location);
+
+
+}
diff --git a/src/main/java/com/giannijin/PeopleFlow/service/DepartmentService.java b/src/main/java/com/giannijin/PeopleFlow/service/DepartmentService.java
new file mode 100644
index 0000000..c4552d5
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/service/DepartmentService.java
@@ -0,0 +1,12 @@
+package com.giannijin.PeopleFlow.service;
+
+import com.giannijin.PeopleFlow.model.Department;
+import java.util.List;
+
+public interface DepartmentService {
+    List<Department> getDepartments();
+    Department getSingleDepartment(Long id);
+    void deleteDepartment(Long id);
+    Department saveDepartment(Department department);
+    Department updateDepartment(Department department);
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/service/DepartmentServiceImp.java b/src/main/java/com/giannijin/PeopleFlow/service/DepartmentServiceImp.java
new file mode 100644
index 0000000..56bbb96
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/service/DepartmentServiceImp.java
@@ -0,0 +1,40 @@
+package com.giannijin.PeopleFlow.service;
+
+import com.giannijin.PeopleFlow.model.Department;
+import com.giannijin.PeopleFlow.repository.DepartmentRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DepartmentServiceImp implements DepartmentService {
+
+    @Autowired
+    private DepartmentRepository departmentRepository;
+
+    @Override
+    public List<Department> getDepartments(){
+        return departmentRepository.findAll();
+    }
+
+    @Override
+    public Department getSingleDepartment(Long id) {
+        return departmentRepository.findById(id).orElse(null);
+    }
+
+    @Override
+    public void deleteDepartment(Long id){
+        departmentRepository.deleteById(id);
+    }
+
+    @Override
+    public Department saveDepartment(Department department){
+        return departmentRepository.save(department);
+    }
+
+    @Override
+    public Department updateDepartment(Department department){
+        return departmentRepository.save(department);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/giannijin/PeopleFlow/service/EmployeeService.java b/src/main/java/com/giannijin/PeopleFlow/service/EmployeeService.java
new file mode 100644
index 0000000..2d4fe98
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/service/EmployeeService.java
@@ -0,0 +1,23 @@
+package com.giannijin.PeopleFlow.service;
+
+import com.giannijin.PeopleFlow.model.Employee;
+
+import java.util.List;
+
+public interface EmployeeService {
+    List<Employee> getEmployees();
+
+    Employee saveEmployee (Employee employee);
+
+    Employee getSingleEmployee (Long id);
+
+    void deleteEmployee (Long id);
+
+    Employee updateEmployee (Employee employee);
+
+    List<Employee> getEmployeeByLastNameAndLocation (String lastName, String location);
+
+    List<Employee> getEmployeeByFirstNameAndLastName (String firstName, String lastName);
+
+}
+
diff --git a/src/main/java/com/giannijin/PeopleFlow/service/EmployeeServiceImp.java b/src/main/java/com/giannijin/PeopleFlow/service/EmployeeServiceImp.java
new file mode 100644
index 0000000..cb12fd7
--- /dev/null
+++ b/src/main/java/com/giannijin/PeopleFlow/service/EmployeeServiceImp.java
@@ -0,0 +1,60 @@
+package com.giannijin.PeopleFlow.service;
+
+import com.giannijin.PeopleFlow.model.Employee;
+import com.giannijin.PeopleFlow.repository.EmployeeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional; // Add this import statement
+
+@Service
+public class EmployeeServiceImp implements EmployeeService{
+
+
+    @Autowired
+    private EmployeeRepository employeeRepository;
+
+
+
+    @Override
+    public List<Employee> getEmployees() {
+        return employeeRepository.findAll();
+    }
+
+    @Override
+    public Employee saveEmployee(Employee employee) {
+        return employeeRepository.save(employee);
+    }
+
+    @Override
+    public Employee getSingleEmployee(Long id) {
+        Optional<Employee> employee = employeeRepository.findById(id);
+        if (employee.isPresent()) {
+            return employee.get();
+        }
+        throw new RuntimeException("Employee is not found for the id "+id);
+    }
+
+    @Override
+    public void deleteEmployee(Long id) {
+        employeeRepository.deleteById(id);
+    }
+
+    @Override
+    public Employee updateEmployee(Employee employee) {
+        return employeeRepository.save(employee);
+    }
+
+    @Override
+    public List<Employee> getEmployeeByLastNameAndLocation(String lastName, String location) {
+        return employeeRepository.findByLastNameAndLocation(lastName, location);
+    }
+
+    @Override
+    public List<Employee> getEmployeeByFirstNameAndLastName(String firstName, String lastName) {
+        return  employeeRepository.findByFirstNameAndLastName(firstName, lastName);
+    }
+
+
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
index 0000000..446cc35
--- /dev/null
+++ b/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.datasource.url=jdbc:mysql://localhost:3306/emp_management
+spring.datasource.username=root
+
+spring.jpa.hibernate.ddl-auto=update
+
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
diff --git a/src/test/java/com/giannijin/PeopleFlow/PeopleFlowTests.java b/src/test/java/com/giannijin/PeopleFlow/PeopleFlowTests.java
new file mode 100644
index 0000000..9e30363
--- /dev/null
+++ b/src/test/java/com/giannijin/PeopleFlow/PeopleFlowTests.java
@@ -0,0 +1,13 @@
+package com.giannijin.PeopleFlow;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class PeopleFlowTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
